View(row_membership)
games <- read.csv("afl_model/games.csv")
players <- read.csv("afl_model/players.csv")
stats <- read.csv("afl_model/stats.csv")
unique(players$position)
positions <- c("Midfield", "Forward", "Defender", "Ruck")
length(which(duplicated(stats[, c("gameId", "playerId")])))
df<- merge(stats, games[, c("homeTeam", "awayTeam", "homeTeamScore", "awayTeamScore", "gameId")], by="gameId") %>%
mutate(
team_score = ifelse(homeTeam == team, homeTeamScore, awayTeamScore),
opp_score = ifelse(homeTeam != team, homeTeamScore, awayTeamScore),
home = as.numeric(homeTeam == team)
) %>%
select(-c(homeTeam, awayTeam, homeTeamScore, awayTeamScore))
df$idx <- seq_len(nrow(df))
player_stats_cols <-c(
"Disposals", "Kicks", "Marks", "Handballs", "Goals",
"Behinds", "Hit.Outs", "Tackles", "Rebounds", "Inside.50s", "Clearances",
"Clangers", "Frees", "Frees.Against", "Brownlow.Votes", "Contested.Possessions",
"Uncontested.Possessions", "Contested.Marks", "Marks.Inside.50",
"One.Percenters", "Bounces", "Goal.Assists"
)
player_mean_data <- df %>%
group_by(playerId) %>%
summarise(across(player_stats_cols, mean))
player_mean_data$idx <- seq_len(nrow(player_mean_data))
row_membership <- df %>%
merge(player_mean_data[c('playerId', 'idx')], by="playerId")
row_membership <- df %>%
merge(player_mean_data[c('playerId', 'idx')], by="playerId") %>%
arrange(idx.x)
row_membership$idx
row_membership$idx.y
player_mean_data$idx <- seq_len(nrow(player_mean_data))
View(players_matrix)
row_membership <- df %>%
merge(player_mean_data[c('playerId', 'idx')], by="playerId") %>%
arrange(idx.x)
players_matrix <- matrix(0, nrow(df), nrow(player_mean_data))
for (i in seq_len(nrw(row_membership))) {
players_matrix[i, row_membership$idx.y[i]] <- 1
}
for (i in seq_len(nrow(row_membership))) {
players_matrix[i, row_membership$idx.y[i]] <- 1
}
players_matrix <- matrix(0, nrow(df), nrow(player_mean_data))
for (i in seq_len(nrow(row_membership))) {
players_matrix[i, row_membership$idx.y[i]] <- 1
}
player_mean_data
colnames(player_mean_data)
View(games)
home_matrix <- matrix(0, nrow(games), nrow(player_mean_data))
colnames(df)
games$idx <- seq_len(nrow(games))
home_df <- df %>%
#select(gameId) %>%
dplyr::filter(home==1)
View(home_df)
home_df <- df %>%
#select(gameId) %>%
dplyr::filter(home==1) %>%
select(c(gameId, playerId))
home_df <- df %>%
#select(gameId) %>%
dplyr::filter(home==1) %>%
select(c(gameId, playerId)) %>%
merge(games[, c('idx', 'gameId')])
games <- read.csv("afl_model/games.csv")
players <- read.csv("afl_model/players.csv")
stats <- read.csv("afl_model/stats.csv")
unique(players$position)
positions <- c("Midfield", "Forward", "Defender", "Ruck")
length(which(duplicated(stats[, c("gameId", "playerId")])))
df<- merge(stats, games[, c("homeTeam", "awayTeam", "homeTeamScore", "awayTeamScore", "gameId")], by="gameId") %>%
mutate(
team_score = ifelse(homeTeam == team, homeTeamScore, awayTeamScore),
opp_score = ifelse(homeTeam != team, homeTeamScore, awayTeamScore),
home = as.numeric(homeTeam == team)
) %>%
select(-c(homeTeam, awayTeam, homeTeamScore, awayTeamScore))
df$idx <- seq_len(nrow(df))
player_stats_cols <-c(
"Disposals", "Kicks", "Marks", "Handballs", "Goals",
"Behinds", "Hit.Outs", "Tackles", "Rebounds", "Inside.50s", "Clearances",
"Clangers", "Frees", "Frees.Against", "Brownlow.Votes", "Contested.Possessions",
"Uncontested.Possessions", "Contested.Marks", "Marks.Inside.50",
"One.Percenters", "Bounces", "Goal.Assists"
)
player_mean_data <- df %>%
group_by(playerId) %>%
summarise(across(player_stats_cols, mean))
player_mean_data$player_idx <- seq_len(nrow(player_mean_data))
games <- read.csv("afl_model/games.csv")
players <- read.csv("afl_model/players.csv")
stats <- read.csv("afl_model/stats.csv")
unique(players$position)
positions <- c("Midfield", "Forward", "Defender", "Ruck")
length(which(duplicated(stats[, c("gameId", "playerId")])))
df<- merge(stats, games[, c("homeTeam", "awayTeam", "homeTeamScore", "awayTeamScore", "gameId")], by="gameId") %>%
mutate(
team_score = ifelse(homeTeam == team, homeTeamScore, awayTeamScore),
opp_score = ifelse(homeTeam != team, homeTeamScore, awayTeamScore),
home = as.numeric(homeTeam == team)
) %>%
select(-c(homeTeam, awayTeam, homeTeamScore, awayTeamScore))
df$row_idx <- seq_len(nrow(df))
player_stats_cols <-c(
"Disposals", "Kicks", "Marks", "Handballs", "Goals",
"Behinds", "Hit.Outs", "Tackles", "Rebounds", "Inside.50s", "Clearances",
"Clangers", "Frees", "Frees.Against", "Brownlow.Votes", "Contested.Possessions",
"Uncontested.Possessions", "Contested.Marks", "Marks.Inside.50",
"One.Percenters", "Bounces", "Goal.Assists"
)
player_mean_data <- df %>%
group_by(playerId) %>%
summarise(across(player_stats_cols, mean))
player_mean_data$player_idx <- seq_len(nrow(player_mean_data))
row_membership <- df %>%
merge(player_mean_data[c('playerId', 'idx')], by="playerId") %>%
arrange(row_idx)
row_membership <- df %>%
merge(player_mean_data[c('playerId', 'player_idx')], by="playerId") %>%
arrange(row_idx)
games$game_idx <- seq_len(nrow(games))
home_matrix <- matrix(0, nrow(games), nrow(player_mean_data))
home_df <- df %>%
#select(gameId) %>%
dplyr::filter(home==1) %>%
select(c(gameId, playerId)) %>%
merge(games[, c('game_idx', 'gameId')], by='gameId') %>%
merge(player_mean_data[c('playerId', 'player_idx')])
home_df <- df %>%
#select(gameId) %>%
dplyr::filter(home==1) %>%
merge(games[, c('game_idx', 'gameId')], by='gameId') %>%
merge(player_mean_data[c('playerId', 'player_idx')], by='playerId') %>%
select(c(gameId, playerId))
home_df <- df %>%
#select(gameId) %>%
dplyr::filter(home==1) %>%
merge(games[, c('game_idx', 'gameId')], by='gameId') %>%
merge(player_mean_data[c('playerId', 'player_idx')], by='playerId') %>%
select(c(game_idx, player_idx))
home_df <- df %>%
#select(gameId) %>%
dplyr::filter(home==1) %>%
merge(games[, c('game_idx', 'gameId')], by='gameId') %>%
merge(player_mean_data[c('playerId', 'player_idx')], by='playerId') %>%
select(c(game_idx, player_idx)) %>%
arrange(player_idx, game_idx)
home_df <- df %>%
#select(gameId) %>%
dplyr::filter(home==1) %>%
merge(games[, c('game_idx', 'gameId')], by='gameId') %>%
merge(player_mean_data[c('playerId', 'player_idx')], by='playerId') %>%
select(c(game_idx, player_idx)) %>%
arrange(player_idx) %>%
mutate(player_presence = 1) %>%
pivot_wider(names_from = player_idx, values_from = player_presence)
home_df <- df %>%
#select(gameId) %>%
dplyr::filter(home==1) %>%
merge(games[, c('game_idx', 'gameId')], by='gameId') %>%
merge(player_mean_data[c('playerId', 'player_idx')], by='playerId') %>%
select(c(game_idx, player_idx)) %>%
arrange(player_idx) %>%
mutate(player_presence = 1) %>%
pivot_wider(names_from = player_idx, values_from = player_presence) %>%
replace_na(0) %>%
arrange(game_idx)
home_df <- df %>%
#select(gameId) %>%
dplyr::filter(home==1) %>%
merge(games[, c('game_idx', 'gameId')], by='gameId') %>%
merge(player_mean_data[c('playerId', 'player_idx')], by='playerId') %>%
select(c(game_idx, player_idx)) %>%
arrange(player_idx) %>%
mutate(player_presence = 1) %>%
pivot_wider(names_from = player_idx, values_from = player_presence) %>%
replace(is.na(.), 0) %>%
arrange(game_idx)
game_idx[1,]
home_df[home_df$game_idx==1]
home_df[home_df$game_idx==1,]
home_df <- df %>%
#select(gameId) %>%
dplyr::filter(home==1) %>%
merge(games[, c('game_idx', 'gameId')], by='gameId') %>%
merge(player_mean_data[c('playerId', 'player_idx')], by='playerId') %>%
select(c(game_idx, player_idx)) %>%
arrange(player_idx) %>%
mutate(player_presence = 1) %>%
pivot_wider(names_from = player_idx, values_from = player_presence) %>%
replace(is.na(.), 0) %>%
arrange(game_idx) %>%
select(-game_idx) %>%
as.matrix
which(home_df[1,])
home_df[1,]
which(home_df[1,]==1)
players[row_membership$player_idx %in% which(home_df[1,]==1), ]
row_membership$player_idx %in% which(home_df[1,]==1)
which(home_df[1,]==1)
player_mean_data[player_mean_data$player_idx %in% which(home_df[1,]==1), ]
pls_in_first_game <- player_mean_data[player_mean_data$player_idx %in% which(home_df[1,]==1), ]
View(pls_in_first_game)
home_df[1,]==1
colnames(home_df)[home_df[1,]==1]
View(player_mean_data)
player_mean_data$player_idx[player_mean_data$playerId == 2005681903]
player_mean_data$player_idx[player_mean_data$playerId == 2011676773]
shape(home_df)
dim(home_df)
nrow(games)
home_df <- df %>%
#select(gameId) %>%
dplyr::filter(home==1) %>%
merge(games[, c('game_idx', 'gameId')], by='gameId') %>%
merge(player_mean_data[c('playerId', 'player_idx')], by='playerId') %>%
select(c(game_idx, player_idx)) %>%
arrange(player_idx) %>%
mutate(player_presence = 1) %>%
pivot_wider(names_from = player_idx, values_from = player_presence) %>%
replace(is.na(.), 0) %>%
arrange(game_idx)
home_df
home_df[1,]
as.matrix(home_df[1,])
home_df[1]
home_df[,1]
home_df[1,]
t(home_df[1,])
player_mean_data$playerId[player_mean_data$player_idx==1022]
players$displayName[players$playerId == 2016827316]
home_df <- df %>%
#select(gameId) %>%
dplyr::filter(home==1)# %>%
home_df <- df %>%
#select(gameId) %>%
dplyr::filter(home==1) %>%
merge(games[, c('game_idx', 'gameId')], by='gameId') #%>%
View(games)
home_df <- df %>%
#select(gameId) %>%
dplyr::filter(home==1) %>%
merge(games[, c('game_idx', 'gameId')], by='gameId') %>%
merge(player_mean_data[c('playerId', 'player_idx')], by='playerId') %>%
select(c(game_idx, player_idx)) %>%
arrange(player_idx) %>%
mutate(player_presence = 1) %>%
pivot_wider(names_from = player_idx, values_from = player_presence) %>%
replace(is.na(.), 0) %>%
arrange(game_idx)
home_df <- df %>%
#select(gameId) %>%
dplyr::filter(home==1) %>%
merge(games[, c('game_idx', 'gameId')], by='gameId') %>%
merge(player_mean_data[c('playerId', 'player_idx')], by='playerId') %>%
select(c(game_idx, player_idx)) %>%
arrange(player_idx) %>%
mutate(player_presence = 1) %>%
pivot_wider(names_from = player_idx, values_from = player_presence) %>%
replace(is.na(.), 0) %>%
arrange(game_idx)  %>%
select(-game_idx) %>%
as.matrix
home_df[2018,]
colnames(home_df)[home_df[2018,]==1]
plids_in_fst <- colnames(home_df)[home_df[2018,]==1]
plids_in_fst <- colnames(home_df)[home_df[2018,]==1] %>% as.numeric
plids_in_fst
player_mean_data$playerId[player_mean_data$player_idx %in% plids_in_fst]
ids_in_fst <- player_mean_data$playerId[player_mean_data$player_idx %in% plids_in_fst]
players$displayName[players$playerId %in% ids_in_fst]
source("~/afl_model/code.R", echo=TRUE)
gc()
library(tidyverse)
library(rstan)
library(parallel)
games <- read.csv("afl_model/games.csv")
games$game_idx <- seq_len(nrow(games))
players <- read.csv("afl_model/players.csv")
players$player_idx <- seq_len(nrow(players))
stats <- read.csv("afl_model/stats.csv")
stats$row_idx <- seq_len(nrow(stats))
length(which(duplicated(stats[, c("gameId", "playerId")])))
df<- merge(stats, games[, c("homeTeam", "awayTeam", "homeTeamScore", "awayTeamScore", "gameId")], by="gameId") %>%
mutate(
team_score = ifelse(homeTeam == team, homeTeamScore, awayTeamScore),
opp_score = ifelse(homeTeam != team, homeTeamScore, awayTeamScore),
home = as.numeric(homeTeam == team)
) %>%
select(-c(homeTeam, awayTeam, homeTeamScore, awayTeamScore)) %>%
arrange(row_idx)
player_stats_cols <-c(
"Disposals", "Kicks", "Marks", "Handballs", "Goals",
"Behinds", "Hit.Outs", "Tackles", "Rebounds", "Inside.50s", "Clearances",
"Clangers", "Frees", "Frees.Against", "Brownlow.Votes", "Contested.Possessions",
"Uncontested.Possessions", "Contested.Marks", "Marks.Inside.50",
"One.Percenters", "Bounces", "Goal.Assists"
)
player_mean_data <- df %>%
group_by(playerId) %>%
summarise(across(player_stats_cols, mean)) %>%
merge(players[, c('playerId', 'player_idx')]) %>%
arrange(player_idx)
row_membership <- (df %>%
merge(players[c('playerId', 'player_idx')], by="playerId") %>%
arrange(row_idx))$player_idx
home_df <- df %>%
merge(games[, c('game_idx', 'gameId')], by='gameId') %>%
merge(players[, c('playerId', 'player_idx')], by='playerId') %>%
select(c(game_idx, player_idx, home)) %>%
arrange(player_idx) %>%
pivot_wider(names_from = player_idx, values_from = home) %>%
arrange(game_idx)  %>%
select(-game_idx) %>%
replace(is.na(.), 0) %>%
as.matrix
away_df <- df %>%
merge(games[, c('game_idx', 'gameId')], by='gameId') %>%
merge(player_mean_data[, c('playerId', 'player_idx')], by='playerId') %>%
select(c(game_idx, player_idx, home)) %>%
mutate(home = 1-home) %>%
arrange(player_idx) %>%
pivot_wider(names_from = player_idx, values_from = home) %>%
arrange(game_idx)  %>%
select(-game_idx) %>%
replace(is.na(.), 0) %>%
as.matrix
model_fit <- stan(
file = "afl_model/model.stan",
cores = parallel::detectCores(),
data = list(
K = length(player_stats_cols),
N_data = nrow(df),
N_players = nrow(player_mean_data),
N_games = n_distinct(df$gameId),
player = row_membership,
player_data = as.matrix(player_mean_data[, player_stats_cols]),
home = home_df,
away = away_df,
deficit = games$homeTeamScore - games$awayTeamScore
)
)
scale(as.matrix(player_mean_data[, player_stats_cols]))
jj <- scale(as.matrix(player_mean_data[, player_stats_cols]))
jj
mean(jj)
lapply(as.data.frame(jj), mean)
lapply(as.data.frame(jj), sd)
model_fit <- stan(
file = "afl_model/model.stan",
cores = parallel::detectCores(),
data = list(
K = length(player_stats_cols),
N_data = nrow(df),
N_players = nrow(player_mean_data),
N_games = n_distinct(df$gameId),
player = row_membership,
player_data = player_mean_data[, player_stats_cols] %>%
as.matrix %>%
scale,
home = home_df,
away = away_df,
deficit = games$homeTeamScore - games$awayTeamScore
)
)
model_fit <- stan(
file = "afl_model/model.stan",
cores = parallel::detectCores(),
data = list(
K = length(player_stats_cols),
N_data = nrow(df),
N_players = nrow(player_mean_data),
N_games = n_distinct(df$gameId),
player = row_membership,
player_data = player_mean_data[, player_stats_cols] %>%
as.matrix %>%
scale,
home = home_df,
away = away_df,
deficit = games$homeTeamScore - games$awayTeamScore
)
)
model_fit <- stan(
file = "afl_model/model.stan",
cores = parallel::detectCores(),
data = list(
K = length(player_stats_cols),
N_data = nrow(df),
N_players = nrow(player_mean_data),
N_games = n_distinct(df$gameId),
player = row_membership,
player_data = player_mean_data[, player_stats_cols] %>%
as.matrix %>%
scale,
home = home_df,
away = away_df,
deficit = games$homeTeamScore - games$awayTeamScore
)
)
player_stats_cols
### main
library(tidyverse)
library(rstan)
library(parallel)
year_filter <- F
year_to_use <- 2012:2021
model_saved <- T
model_path <- "model_v3.RData"
source("code/load_data.R")
setwd("data_projects/afl_model")
### main
library(tidyverse)
library(rstan)
library(parallel)
year_filter <- F
year_to_use <- 2012:2021
model_saved <- T
model_path <- "model_v3.RData"
source("code/load_data.R")
games <- get_file("data/games.csv", "game", filter_years=year_filter, years=year_to_use)
players <- get_file("data/players.csv", "player")
stats <- get_file("data/stats.csv", "row", filter_years=year_filter, years=year_to_use)
df <- get_main_df(stats, games)
player_stats_cols <-c(
"Disposals", "Kicks", "Marks", "Handballs", "Goals",
"Behinds", "Hit.Outs", "Tackles", "Rebounds", "Inside.50s", "Clearances",
"Clangers", "Frees", "Frees.Against", "Brownlow.Votes", "Contested.Possessions",
"Uncontested.Possessions", "Contested.Marks", "Marks.Inside.50",
"One.Percenters", "Bounces", "Goal.Assists"
)
player_mean_data <- get_player_data(df, player_stats_cols, players)
source("code/feature_gen.R")
home <- get_presence_matrix(df, games, players)
away <- get_presence_matrix(df, games, players, is_away=1)
player_matrix <- get_player_matrix(player_mean_data, player_stats_cols)
stan_input <- get_stan_input(player_matrix, home, away, games)
source("code/train_model.R")
if (model_saved) {
load(model_path)
} else {
model_fit <- train_model("code/model.stan", stan_input)
save(model_fit, file=model_path)
}
res <- get_stan_res(model_fit, player_stats_cols)
stan_res <- res
player_mat <- player_matrix
random_deficits <- stan_res$alpha + stan_res$beta_home*(home%*%stan_res$player_value) - stan_res$beta_away*(away%*%stan_res$player_value)
dim(home)
dim(stan_res$player_value_a)
random_deficits <- stan_res$alpha +
stan_res$beta_home_a*(home%*%stan_res$player_value_a) +
stan_res$beta_home_b*(home%*%stan_res$player_value_b) -
stan_res$beta_away_a*(away%*%stan_res$player_value_a) -
stan_res$beta_away_b*(away%*%stan_res$player_value_b)
player_scores_a <- stan_res$beta_intercept[1] + player_mat %*% stan_res$beta_a
player_scores_b <- stan_res$beta_intercept[2] + player_mat %*% stan_res$beta_b
scores_home_a <- apply(home, 1, function(x) sum(x*player_scores_a)/sum(x))
scores_away_a <- apply(away, 1, function(x) sum(x*player_scores_a)/sum(x))
scores_home_b <- apply(home, 1, function(x) sum(x*player_scores_b)/sum(x))
scores_away_b <- apply(away, 1, function(x) sum(x*player_scores_b)/sum(x))
expected_deficits <- stan_res$alpha + stan_res$beta_home[1]*scores_home_a + stan_res$beta_home[2]*scores_home_b -
stan_res$beta_away[1]*scores_away_a - stan_res$beta_away[2]*scores_away_b
list(
deficits=random_deficits,
deficits_expc=expected_deficits,
wins=random_deficits>0
)
source("~/data_projects/afl_model/main.R", echo=TRUE)
stan_input$deficit>0
game_wins <- as.numeric(stan_input$deficit>0)
pred
pred$wins
random_deficits <- stan_res$alpha +
stan_res$beta_home_a*(home%*%stan_res$player_value_a) +
stan_res$beta_home_b*(home%*%stan_res$player_value_b) -
stan_res$beta_away_a*(away%*%stan_res$player_value_a) -
stan_res$beta_away_b*(away%*%stan_res$player_value_b)
random_deficits
stan_res$alpha
random_deficits <- stan_res$alpha +
stan_res$beta_home[1]*(home%*%stan_res$player_value_a) +
stan_res$beta_home[2]*(home%*%stan_res$player_value_b) -
stan_res$beta_away[1]*(away%*%stan_res$player_value_a) -
stan_res$beta_away[2]*(away%*%stan_res$player_value_b)
random_deficits
predict_games_stan <- function(stan_res, home, away, player_mat) {
#random_deficits <- stan_res$alpha + stan_res$beta_home*(home%*%stan_res$player_value) - stan_res$beta_away*(away%*%stan_res$player_value)
random_deficits <- stan_res$alpha +
stan_res$beta_home[1]*(home%*%stan_res$player_value_a) +
stan_res$beta_home[2]*(home%*%stan_res$player_value_b) -
stan_res$beta_away[1]*(away%*%stan_res$player_value_a) -
stan_res$beta_away[2]*(away%*%stan_res$player_value_b)
player_scores_a <- stan_res$beta_intercept[1] + player_mat %*% stan_res$beta_a
player_scores_b <- stan_res$beta_intercept[2] + player_mat %*% stan_res$beta_b
scores_home_a <- apply(home, 1, function(x) sum(x*player_scores_a)/sum(x))
scores_away_a <- apply(away, 1, function(x) sum(x*player_scores_a)/sum(x))
scores_home_b <- apply(home, 1, function(x) sum(x*player_scores_b)/sum(x))
scores_away_b <- apply(away, 1, function(x) sum(x*player_scores_b)/sum(x))
expected_deficits <- stan_res$alpha + stan_res$beta_home[1]*scores_home_a + stan_res$beta_home[2]*scores_home_b -
stan_res$beta_away[1]*scores_away_a - stan_res$beta_away[2]*scores_away_b
list(
deficits=random_deficits,
deficits_expc=expected_deficits,
wins=random_deficits>0
)
}
pred <- predict_games_stan(res, home, away, player_matrix)
pred
