# get cumsum of player stats up to that game
ttt <- df %>%
merge(players[, c('playerId', 'player_idx')]) %>%
merge(games[, c('gameId', 'game_idx', 'date_idx')]) %>%
arrange(player_idx) %>%
group_by(player_idx) %>%
arrange(date_idx, .by_group = T)
View(ttt)
# for each game
# get cumsum of player stats up to that game
ttt <- df %>%
merge(players[, c('playerId', 'player_idx')]) %>%
merge(games[, c('gameId', 'game_idx', 'date_idx')]) %>%
arrange(player_idx) %>%
group_by(player_idx) %>%
arrange(date_idx, .by_group = T) %>%
mutate(game_num = row_number())
View(ttt)
# for each game
# get cumsum of player stats up to that game
ttt <- df %>%
merge(players[, c('playerId', 'player_idx')]) %>%
merge(games[, c('gameId', 'game_idx', 'date_idx')]) %>%
arrange(player_idx) %>%
group_by(player_idx) %>%
arrange(date_idx, .by_group = T) %>%
mutate(game_num = row_number()) %>%
mutate(across(player_stats_cols, cumsum))
# for each game
# get cumsum of player stats up to that game
ttt <- df %>%
merge(players[, c('playerId', 'player_idx')]) %>%
merge(games[, c('gameId', 'game_idx', 'date_idx')]) %>%
arrange(player_idx) %>%
group_by(player_idx) %>%
arrange(date_idx, .by_group = T) %>%
mutate(game_num = row_number()) %>%
mutate(across(all_of(player_stats_cols), cumsum))
# for each game
# get cumsum of player stats up to that game
ttt <- df %>%
merge(players[, c('playerId', 'player_idx')]) %>%
merge(games[, c('gameId', 'game_idx', 'date_idx')]) %>%
arrange(player_idx) %>%
group_by(player_idx) %>%
arrange(date_idx, .by_group = T) %>%
mutate(game_num = row_number()) #%>%
# for each game
# get cumsum of player stats up to that game
ttt2 <- df %>%
merge(players[, c('playerId', 'player_idx')]) %>%
merge(games[, c('gameId', 'game_idx', 'date_idx')]) %>%
arrange(player_idx) %>%
group_by(player_idx) %>%
arrange(date_idx, .by_group = T) %>%
mutate(game_num = row_number()) %>%
mutate(across(all_of(player_stats_cols), cumsum))
View(ttt2)
# for each game
# get cumsum of player stats up to that game
ttt2 <- df %>%
merge(players[, c('playerId', 'player_idx')]) %>%
merge(games[, c('gameId', 'game_idx', 'date_idx')]) %>%
arrange(player_idx) %>%
group_by(player_idx) %>%
arrange(date_idx, .by_group = T) %>%
mutate(game_num = row_number()) %>%
mutate(across(all_of(player_stats_cols), .fns = function(x)cumsum(x)/game_num))
19/3
?ungroup
# for each game
# get cumsum of player stats up to that game
ttt2 <- df %>%
merge(players[, c('playerId', 'player_idx')]) %>%
merge(games[, c('gameId', 'game_idx', 'date_idx')]) %>%
arrange(player_idx) %>%
group_by(player_idx) %>%
arrange(date_idx, .by_group = T) %>%
mutate(game_num = row_number()) %>%
mutate(across(all_of(player_stats_cols), .fns = function(x)cumsum(x)/game_num)) %>%
ungroup %>%
arrange(row_idx)
# for each game
# get cumsum of player stats up to that game
ttt2 <- df %>%
merge(players[, c('playerId', 'player_idx')]) %>%
merge(games[, c('gameId', 'game_idx', 'date_idx')]) %>%
arrange(player_idx) %>%
group_by(player_idx) %>%
arrange(date_idx, .by_group = T) %>%
mutate(game_num = row_number()) %>%
mutate(across(all_of(player_stats_cols), .fns = function(x)cumsum(x)/game_num)) %>%
ungroup %>%
arrange(row_idx) %>%
group_by(gameId)
# for each game
# get cumsum of player stats up to that game
ttt2 <- df %>%
merge(players[, c('playerId', 'player_idx')]) %>%
merge(games[, c('gameId', 'game_idx', 'date_idx')]) %>%
arrange(player_idx) %>%
group_by(player_idx) %>%
arrange(date_idx, .by_group = T) %>%
mutate(game_num = row_number()) %>%
mutate(across(all_of(player_stats_cols), .fns = function(x)cumsum(x)/game_num)) %>%
ungroup %>%
arrange(row_idx) %>%
group_by(game_idx) %>%
dplyr::filter(home==1)
# for each game
# get cumsum of player stats up to that game
ttt2 <- df %>%
merge(players[, c('playerId', 'player_idx')]) %>%
merge(games[, c('gameId', 'game_idx', 'date_idx')]) %>%
arrange(player_idx) %>%
group_by(player_idx) %>%
arrange(date_idx, .by_group = T) %>%
mutate(game_num = row_number()) %>%
mutate(across(all_of(player_stats_cols), .fns = function(x)cumsum(x)/game_num)) %>%
ungroup %>%
arrange(row_idx) %>%
group_by(game_idx) %>%
dplyr::filter(home==1) %>%
summarise(across(all_of(player_cols), mean))
# for each game
# get cumsum of player stats up to that game
ttt2 <- df %>%
merge(players[, c('playerId', 'player_idx')]) %>%
merge(games[, c('gameId', 'game_idx', 'date_idx')]) %>%
arrange(player_idx) %>%
group_by(player_idx) %>%
arrange(date_idx, .by_group = T) %>%
mutate(game_num = row_number()) %>%
mutate(across(all_of(player_stats_cols), .fns = function(x)cumsum(x)/game_num)) %>%
ungroup %>%
arrange(row_idx) %>%
group_by(game_idx) %>%
dplyr::filter(home==1) %>%
summarise(across(all_of(player_stats_cols), mean))
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
View(home_avgs)
View(away_avgs)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
scale(home_avgs)
source("~/.active-rstudio-document", echo=TRUE)
View(game_avgs)
game_avgs[[1]]
do.call(rbind, game_avgs)
ov_mean <- mean(do.call(rbind, map(game_avgs, player_stats_cols))
)
ov_mean
game_avgs
map(game_avgs, 1)
map(game_avgs, c(1,2))
ov_mean <- apply(do.call(rbind, game_avgs), mean)
ov_mean
ov_mean <- apply(do.call(rbind, game_avgs), 2, mean)
ov_mean
ov_mean <- apply(do.call(rbind, lapply(game_avgs, `[`, player_stats_cols), 2, mean)
)
?`[`
# for each game
# get cumsum of player stats up to that game
get_game_rolling_avg <- function(main, players_df, games_df, stats_cols, homedf=T, player_idxcol='player_idx',
homecol='home', game_idxcol='game_idx', date_idxcol='date_idx', row_idxcol='row_idx')
{
main %>%
merge(players_df[, c('playerId', player_idxcol)]) %>%
merge(games_df[, c('gameId', game_idxcol, date_idxcol)]) %>%
# get rolling avgs for each player by game
arrange(.data[[player_idxcol]]) %>%
group_by(.data[[player_idxcol]]) %>%
arrange(.data[[date_idxcol]], .by_group = T) %>%
mutate(game_num = row_number()) %>%
mutate(across(all_of(stats_cols), .fns = function(x)cumsum(x)/game_num)) %>%
ungroup %>%
# filter for home/away
dplyr::filter(.data[[homecol]]==as.numeric(homedf)) %>%
# get avgs per game
group_by(.data[[game_idxcol]]) %>%
summarise(across(all_of(stats_cols), mean)) %>%
arrange(.data[[game_idxcol]]) %>%
select(across(stats_cols))
}
game_avgs <- map(
c(T,F),
~ get_game_rolling_avg(df, players, games, player_stats_cols, homedf=.)
)
main %>%
merge(players_df[, c('playerId', player_idxcol)]) %>%
merge(games_df[, c('gameId', game_idxcol, date_idxcol)]) %>%
# get rolling avgs for each player by game
arrange(.data[[player_idxcol]]) %>%
group_by(.data[[player_idxcol]]) %>%
arrange(.data[[date_idxcol]], .by_group = T) %>%
mutate(game_num = row_number()) %>%
mutate(across(all_of(stats_cols), .fns = function(x)cumsum(x)/game_num)) %>%
ungroup %>%
# filter for home/away
dplyr::filter(.data[[homecol]]==as.numeric(homedf)) %>%
# get avgs per game
group_by(.data[[game_idxcol]]) %>%
summarise(across(all_of(stats_cols), mean)) %>%
arrange(.data[[game_idxcol]]) %>%
select(all_of(stats_cols))
main %>%
merge(players_df[, c('playerId', player_idxcol)]) %>%
merge(games_df[, c('gameId', game_idxcol, date_idxcol)]) %>%
# get rolling avgs for each player by game
arrange(.data[[player_idxcol]]) %>%
group_by(.data[[player_idxcol]]) %>%
arrange(.data[[date_idxcol]], .by_group = T) %>%
mutate(game_num = row_number()) %>%
mutate(across(all_of(stats_cols), .fns = function(x)cumsum(x)/game_num)) %>%
ungroup %>%
# filter for home/away
dplyr::filter(.data[[homecol]]==as.numeric(homedf)) %>%
# get avgs per game
group_by(.data[[game_idxcol]]) %>%
summarise(across(all_of(stats_cols), mean)) %>%
arrange(.data[[game_idxcol]]) %>%
select(all_of(stats_cols))
# for each game
# get cumsum of player stats up to that game
get_game_rolling_avg <- function(main, players_df, games_df, stats_cols, homedf=T, player_idxcol='player_idx',
homecol='home', game_idxcol='game_idx', date_idxcol='date_idx', row_idxcol='row_idx')
{
main %>%
merge(players_df[, c('playerId', player_idxcol)]) %>%
merge(games_df[, c('gameId', game_idxcol, date_idxcol)]) %>%
# get rolling avgs for each player by game
arrange(.data[[player_idxcol]]) %>%
group_by(.data[[player_idxcol]]) %>%
arrange(.data[[date_idxcol]], .by_group = T) %>%
mutate(game_num = row_number()) %>%
mutate(across(all_of(stats_cols), .fns = function(x)cumsum(x)/game_num)) %>%
ungroup %>%
# filter for home/away
dplyr::filter(.data[[homecol]]==as.numeric(homedf)) %>%
# get avgs per game
group_by(.data[[game_idxcol]]) %>%
summarise(across(all_of(stats_cols), mean)) %>%
arrange(.data[[game_idxcol]]) %>%
select(all_of(stats_cols))
}
game_avgs <- map(
c(T,F),
~ get_game_rolling_avg(df, players, games, player_stats_cols, homedf=.)
)
ov_mean <- apply(do.call(rbind, game_avgs, 2, mean))
ov_mean <- apply(do.call(rbind, game_avgs), 2, mean)
ov_mean
ov_stats <- walk(
c(mean, sd),
function(f) apply(do.call(rbind, game_avgs), 2, f)
)
ov_stats
ov_stats[[1]]
ov_stats <- walk(
c(mean, sd),
function(f) apply(do.call(rbind, game_avgs), 2, function(x) f(x))
)
ov_stats
ov_stats[[1]]
ov_stats[[1]](2)
ov_stats[[1]](c(2,3))
ov_stats <- walk(
c(mean, sd),
~ apply(do.call(rbind, game_avgs), 2, .)
)
ov_stats
ov_stats <- map(
c(mean, sd),
~ apply(do.call(rbind, game_avgs), 2, .)
)
ov_stats
game_avgs-ov_stats[[1]]
replicate(2, c(1,2))
t(replicate(2, c(1,2)))
)
ov_stats <- map(
c(mean, sd),
~ t(replicate(N,apply(do.call(rbind, game_avgs), 2, .)))
)
N <- nrow(games)
ov_mean <- apply(do.call(rbind, game_avgs), 2, mean)
ov_stats <- map(
c(mean, sd),
~ t(replicate(N,apply(do.call(rbind, game_avgs), 2, .)))
)
ov_stats
game_avgs[[1]]-ov_stats[[1]]
(game_avgs[[1]]-ov_stats[[1]])/ov_stats[[2]]
# for each game
# get cumsum of player stats up to that game
get_game_avgs <- function(main, players_df, games_df, stats_cols, player_idxcol='player_idx',
homecol='home', game_idxcol='game_idx', date_idxcol='date_idx', row_idxcol='row_idx')
{
get_game_rolling_avg_helper <- function(homedf)
{
main %>%
merge(players_df[, c('playerId', player_idxcol)]) %>%
merge(games_df[, c('gameId', game_idxcol, date_idxcol)]) %>%
# get rolling avgs for each player by game
arrange(.data[[player_idxcol]]) %>%
group_by(.data[[player_idxcol]]) %>%
arrange(.data[[date_idxcol]], .by_group = T) %>%
mutate(game_num = row_number()) %>%
mutate(across(all_of(stats_cols), .fns = function(x)cumsum(x)/game_num)) %>%
ungroup %>%
# filter for home/away
dplyr::filter(.data[[homecol]]==as.numeric(homedf)) %>%
# get avgs per game
group_by(.data[[game_idxcol]]) %>%
summarise(across(all_of(stats_cols), mean)) %>%
arrange(.data[[game_idxcol]]) %>%
select(all_of(stats_cols))
}
map(
c(T,F),
~ get_game_rolling_avg_helper(.)
)
}
game_avgs <- get_game_avgs(df, players, games, player_stats_cols)
game_avgs[[1]][1,]
game_avgs[[1]][2,]
game_avgs[[2]][1,]
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
ov_stats
View(away_avgs)
View(game_avgs)
ov_stats <- map(
c(mean, sd),
#~ t(replicate(N,apply(do.call(rbind, game_avgs), 2, .)))
~ apply(do.call(rbind, game_avgs), 2, .)
)
game_avgs[[1]]-ov_stats[[1]]
(game_avgs[[1]]-ov_stats[[1]])/ov_stats[[2]]
rbind(game_avgs[[1]], game_avgs[[2]])
mean(rbind(game_avgs[[1]], game_avgs[[2]]))
apply(rbind(game_avgs[[1]], game_avgs[[2]]),2,mean)
apply(rbind(game_avgs[[1]], game_avgs[[2]]),2,sd)
ov_stats[[2]]
msh <- function(f) {
apply((do.call(rbind, game_avgs)-ov_stats[[1]])/ov_stats[[2]], 2, f)
}
map(
c(mean,sd),
~ msh(.)
)
ov_stats
N <- nrow(games)
ov_stats <- map(
c(mean, sd),
~ t(replicate(N,apply(do.call(rbind, game_avgs), 2, .)))
#~ apply(do.call(rbind, game_avgs), 2, .)
)
msh <- function(f) {
apply((do.call(rbind, game_avgs)-ov_stats[[1]])/ov_stats[[2]], 2, f)
}
map(
c(mean,sd),
~ msh(.)
)
map(
ov_stats,
~.[1,]
)
scale(rbind, ov_stats)
scale(do.call(rbind, ov_stats))
scale(do.call(rbind, game_avgs))
ov_stats <- map(
c(mean, sd),
#~ t(replicate(N,apply(do.call(rbind, game_avgs), 2, .)))
~ apply(do.call(rbind, game_avgs), 2, .)
)
ov_stats
t(rep(2,c(1,2)))
t(rep(3,c(1,2)))
rep(c(1,2),2)
replicate(2, c(1,2))
replicate(2, c(1,2)) - c(1,2)
replicate(2, c(1,2)) - t(c(1,2))
ov_stats <- map(
c(mean, sd),
~ t(replicate(N,apply(do.call(rbind, game_avgs), 2, .)))
#~ apply(do.call(rbind, game_avgs), 2, .)
)
msh <- function(f) {
apply((do.call(rbind, game_avgs)-ov_stats[[1]])/ov_stats[[2]], 2, f)
}
map(
c(mean,sd),
~ msh(.)
)
ov_stats
ov_stats[[1]][1,]
ov_stats[[2]][1,]
scaled_avgs <- map(
game_avgs,
~ (.-ov_stats[[1]])/ov_stats[[2]]
)
scaled_avgs[[1]]
apply(scaled_avgs[[1]],2,mean)
apply(scaled_avgs[[1]],2,sd)
apply(scaled_avgs[[2]],2,sd)
game_avgs <- get_game_avgs(df, players, games, player_stats_cols)
scale_stats <- function(avgs, N) {
ov_stats <- map(
c(mean, sd),
~ t(replicate(N,apply(do.call(rbind, avgs), 2, .)))
)
map(
avgs,
~ (.-ov_stats[[1]])/ov_stats[[2]]
)
}
scaled_avgs <- scale_stats(game_avgs, nrow(games))
apply(scaled_avgs[[2]],2,sd)
apply(scaled_avgs[[2]],2,mean)
apply(scaled_avgs[[1]],2,mean)
map(scaled_avgs, ~apply(.,2,mean))
do.call(rbind,apply(scaled_avgs[[1]],2,mean))
do.call(rbind,map(scaled_avgs,~apply(.,2,mean)))
apply(do.call(rbind,map(scaled_avgs,~apply(.,2,mean))),2,sum)
apply(do.call(rbind,map(scaled_avgs,~apply(.,2,sd))),2,sum)
?set_names
presence <- c(F,T) %>%
set_names(c('home', 'away')) %>%
map( ~get_presence_matrix(df, games, players, is_away=.) )
presence[['home']]
presence
View(presence)
# for each game
# get cumavg of player stats up to that game
get_game_avgs <- function(main, players_df, games_df, stats_cols, player_idxcol='player_idx',
homecol='home', game_idxcol='game_idx', date_idxcol='date_idx', row_idxcol='row_idx')
{
get_game_rolling_avg_helper <- function(homedf)
{
main %>%
merge(players_df[, c('playerId', player_idxcol)]) %>%
merge(games_df[, c('gameId', game_idxcol, date_idxcol)]) %>%
# get rolling avgs for each player by game
arrange(.data[[player_idxcol]]) %>%
group_by(.data[[player_idxcol]]) %>%
arrange(.data[[date_idxcol]], .by_group = T) %>%
mutate(across(all_of(stats_cols), .fns = function(x)cumsum(x)/seq_along(x))) %>%
ungroup %>%
# filter for home/away
dplyr::filter(.data[[homecol]]==as.numeric(homedf)) %>%
# get avgs over team per game
group_by(.data[[game_idxcol]]) %>%
summarise(across(all_of(stats_cols), mean)) %>%
arrange(.data[[game_idxcol]]) %>%
select(all_of(stats_cols))
}
c(T,F) %>%
set_names(c('home', 'away')) %>%
map(~ get_game_rolling_avg_helper(.))
}
# for each game
# get cumavg of player stats up to that game
get_game_avgs <- function(main, players_df, games_df, stats_cols, player_idxcol='player_idx',
homecol='home', game_idxcol='game_idx', date_idxcol='date_idx', row_idxcol='row_idx')
{
get_game_rolling_avg_helper <- function(homedf)
{
main %>%
merge(players_df[, c('playerId', player_idxcol)]) %>%
merge(games_df[, c('gameId', game_idxcol, date_idxcol)]) %>%
# get rolling avgs for each player by game
arrange(.data[[player_idxcol]]) %>%
group_by(.data[[player_idxcol]]) %>%
arrange(.data[[date_idxcol]], .by_group = T) %>%
mutate(across(all_of(stats_cols), .fns = function(x)cumsum(x)/seq_along(x))) %>%
ungroup %>%
# filter for home/away
dplyr::filter(.data[[homecol]]==as.numeric(homedf)) %>%
# get avgs over team per game
group_by(.data[[game_idxcol]]) %>%
summarise(across(all_of(stats_cols), mean)) %>%
arrange(.data[[game_idxcol]]) %>%
select(all_of(stats_cols))
}
c(T,F) %>%
set_names(c('home', 'away')) %>%
map(~ get_game_rolling_avg_helper(.))
}
scale_stats <- function(avgs, N) {
ov_stats <- c(mean, sd) %>%
set_names('mean', 'sd') %>%
map(~ t(replicate(N,apply(do.call(rbind, avgs), 2, .))))
map(
avgs,
~ (.-ov_stats[[1]])/ov_stats[[2]]
)
}
game_avgs <- get_game_avgs(df, players, games, player_stats_cols)
scaled_avgs <- scale_stats(game_avgs, nrow(games))
scaled_avgs$home
mean(scaled_avgs$home)
apply(scaled_avgs$home, 2, mean)
apply(scaled_avgs$home, 2, sd)
apply(scaled_avgs$away, 2, sd)
